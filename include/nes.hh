#pragma once

#include <cstdint>
#include <fstream>

#include "display.hh"
class Sound;
#include "sound.hh"
#include "ricoh_2a03.hh"
class Memory;
class MDATA;
#include "memory.hh"
#include "ppu.hh"

//? Shorthand for 8- and 16-bit unsigned integers
typedef uint8_t u8;
typedef uint16_t u16;

enum InfoStatus {
    SUCCESS,
    ERROR,
    WARNING,
    NULL_PTR,
    INVALID_PARAM,
    READ_ERROR,
    WRITE_ERROR,
    
};
typedef InfoStatus ist;
const char* IST_Strings[7] = {
    "SUCCESS",
    "ERROR",
    "WARNING",
    "NULL_PTR",
    "INVALID_PARAM",
    "READ_ERROR",
    "WRITE_ERROR"
};

class iNES;

class NES {
public:
    iNES* _DATA;
    Display* _VID_OUT;
    Sound* _AUD_OUT;
    
    Memory* _MEM;
    Ricoh_2A03* _CORE;
    CPU* _CPU;
    APU* _APU;
    PPU* _PPU;

    NES();
    ~NES();

    //? ????????????????????????????????????????????????????????????????????????????????????
    //? ????????????????????????????????????????????????????????????????????????????????????
    //? CORE SYSTEM METHODS
    //? ????????????????????????????????????????????????????????????????????????????????????
    u8 PowerOn(const char* init_code_filepath); //TODO
    u8 PowerOff(); //TODO
    u8 VM_main(); //TODO

    //? Get bit value at {bit_index} of byte(s) {data}
    //? If {addr} is true and single-byte, then {data} (or {data}[0]) is used as an address for _MEM->ReadBit()
    //? If {addr} is false and single-byte, then bit is extracted from {data} (or {data[0]}) itself
    //? If multi-byte, {addr} is ignored; bit indexed from within byte array
    u8 GetBit(MDATA data, uint8_t bit_idx, bool addr);
    //? Reads from memory with requested params, after validation
    //? Caller must eventually free any multi-byte MDATA pointers
    MDATA* MemRead(uint16_t addr, uint16_t len);

    //? Change volume by SIGNED {amount} %
    //? Returns SIGNED difference between current vol. and old vol.
    int8_t SetVolume(int8_t amount);
    u8 GetVolume();
    u8 ScreenAdjust(); //TODO

    //? ????????????????????????????????????????????????????????????????????????????????????
    //? ????????????????????????????????????????????????????????????????????????????????????
    //? File I/O
    //? ????????????????????????????????????????????????????????????????????????????????????
    InfoStatus iNES_Read(const char* file_in); //TODO
    InfoStatus iNES_Read(const char* file_in, uint16_t offset); //TODO
    InfoStatus iNES_Read(const char* file_in, uint16_t offset, uint16_t width); //TODO
    InfoStatus iNES_Write(const char* file_out,  vector<uint16_t> data, bool overwrite); //TODO
};
//! Global "system" object that starts the entire process
extern NES* VM;


//? ????????????????????????????????????????????????????????????????????????????????????
//? ????????????????????????????????????????????????????????????????????????????????????
//? iNES filetype classes and methods
//? ????????????????????????????????????????????????????????????????????????????????????
class PRG_ROM;
class CHR_ROM;
class INST_ROM;
class PROM;

class iNES : public NES {
protected:
    char* file_data = nullptr;

    //* 16 bytes
    vector<uint8_t>* header = nullptr;
    //* (if present) 512 bytes
    vector<uint8_t>* trainer = nullptr;
    //* 16384 * x bytes
    PRG_ROM* prg_rom = nullptr;
    //* (if present) 8192 * y bytes
    CHR_ROM* chr_rom = nullptr;
    //* (if present) 8192 bytes
    INST_ROM* inst_rom = nullptr;
    //* (if present) 16 bytes Data, 16 bytes CounterOut
    PROM* prom = nullptr;
    //* (if present, at end of file) 128 or 127 bytes
    char* title = nullptr;

public:
    const char* filename;
    uint32_t file_size;

    //* /////////////////
    //*  HEADER FLAGS
    //* /////////////////
    //* HEADER_FLAGS_6:
    //* (Trainer not used on unmodified dumps of original ROM carts)   
    //*   MMMM ATBN
    //*   |||| ||||
    //*   |||| |||+- NAMETABLE: Arrangement (0): Vert. arranged ("horiz. mirrored") (CIRAM A10 = PPU A11)
    //*   |||| |||                          (1): Horiz. arranged ("vert. mirrored") (CIRAM A10 = PPU A10)
    //*   |||| ||+-- BATTERY-BACKED (1): PRG RAM ($6000-7FFF) or other persistent memory
    //*   |||| |+--- TRAINER PRESENT (1): 512-byte trainer at $7000-71FF (stored before PRG data)
    //*   |||| +---- NAMETABLE ALTERNATIVE LAYOUT (1)
    //*   ++++------ MAPPER #: lower nibble
    //* NOTES ON FLAGS_6:
    //*   -Nametable Arrangement, Alternative Layout
    //*      +Some mappers have mapper-controlled nametable mirroring,
    //*       therefore bit 0/3 is ignored
    //*      +Mappers w/ hard-wired nametable layout specify arrangement w/ BIT 0
    //*      +Some mappers have 4-screen variation of board, specified w/ BIT 3
    //*      +Other mappers use BIT 0 and BIT 3 together
    //*      +Several others have 4-screen as their only option, and BIT 3 is set redundantly
    
    //* HEADER_FLAGS_7 (PlayChoice-10 bit is unofficial, compat. for 2C03 RGB PPU):     
    //* (VS Unisystem games have a coin slot, different palettes)
    //*   7654 3210
    //*   |||| ||||
    //*   |||| |||+- VS Unisystem
    //*   |||| ||+-- PlayChoice-10 (8KB of HintScreen data, stored after CHR ROM)
    //*   |||| ++--- NES 2.0 (2): flags 8-15 are in NES 2.0 format
    //*   ++++------ MAPPER #: upper nibble
    
    //* HEADER_FLAGS_8 (OFFICIAL, but rarely used):     
    //*   7654 3210
    //*   |||| ||||
    //*   ++++ ++++- PRG RAM Size (0 infers 8KB)
    
    //* HEADER_FLAGS_9 (OFFICIAL, but rarely used): 
    //*   7654 3210
    //*   |||| ||||
    //*   |||| |||+- TV System (0: NTSC, 1: PAL)
    //*   ++++ +++-- Reserved, set to 0
    
    //* HEADER_FLAGS_10 (UNOFFICIAL, rarely used):
    //*   7654 3210
    //*     ||   ||
    //*     ||   ++- TV System (0: NTSC, 2: PAL, 1/3: dual compatible)
    //*     |+------ PRG RAM ($6000-7FFF) (0: present, 1: NOT present)
    //*     +------- 0: Board has NO bus conflicts, 1: Board HAS bus conflicts

    iNES(const char* _filename) : filename(_filename) {};
    ~iNES() {};

    //? Saves data in iNES file to object, processes binary data
    //? to fill in the other data members and state members
    ist SaveData(ifstream& iNES_in);
    ist ExportData(ofstream& iNES_out);

    ist ProcessRead();
};


class PRG_ROM : public iNES {
public:
    PRG_ROM();
    ~PRG_ROM();
};

class CHR_ROM : public iNES {
public:
    CHR_ROM();
    ~CHR_ROM();
};

class INST_ROM : public iNES {
public:
    INST_ROM();
    ~INST_ROM();
};

class PROM : public iNES {
public:
    PROM();
    ~PROM();
};